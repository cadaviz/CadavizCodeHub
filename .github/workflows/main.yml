name: Cadaviz Code Hub

on:
  push:
    branches:
      - main
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest  
    steps:
      - name: 📥 Checkout project
        uses: actions/checkout@v4

      - name: 🏗️ .NET SDK install
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  

      - name: 📦 Restore packages
        run: dotnet restore

      - name: 🔨 Build project
        run: dotnet build --configuration Release --no-restore

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout project
        uses: actions/checkout@v4
     
      - name: 🧪 Run unit tests with coverage
        run: dotnet test ./tests/CadavizCodeHub.Unit/CadavizCodeHub.Unit.csproj --logger "trx;LogFileName=test-results.trx" --collect "XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./CoverageResults/coverage.opencover.xml

      - name: 📊 Publish test results
        uses: actions/upload-artifact@v4
        with:
          name: UnitTestResults
          path: tests/CadavizCodeHub.Unit/TestResults/*.trx
          if-no-files-found: warn
                
      - name: 📊 Publish coverage results
        uses: actions/upload-artifact@v4
        with:
          name: UnitTestCoverage
          path: tests/CadavizCodeHub.Unit/TestResults/**/coverage.cobertura.xml

  generate-test-reports:
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read
      actions: read
      checks: write
    steps:
      - name: 📥 Checkout project
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          pattern: UnitTestResults*
          merge-multiple: true
          run-id: ${{ github.event.workflow_run.id }}

      - name: 🔨 Generate report
        uses: dorny/test-reporter@v1
        with:
          name: test-reports
          path: "*.trx"
          reporter: dotnet-trx

  sonarqube-analysis:
    runs-on: ubuntu-latest 
    needs: [build, unit-tests]
    steps:

      - name: 🏗️ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner
      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install --global coverlet.console
      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: 📥 Checkout project
        uses: actions/checkout@v4

      - name: 📥 Download coverage results
        uses: actions/download-artifact@v4
        with:
          pattern: "*TestCoverage*"
          merge-multiple: true
      - name: 📥 Download coverage results2
        run: ls -R .

      - name: 🔨 Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FILE_PATH=$(find . -type f -name "coverage.cobertura.xml" | head -n 1)
          ls -lh "$FILE_PATH"
          dotnet sonarscanner begin /k:"cadaviz_CadavizCodeHub" /o:"cadaviz" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="$FILE_PATH"
          dotnet build
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"